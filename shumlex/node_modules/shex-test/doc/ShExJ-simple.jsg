# This is a simplified JSON Grammar (JSG) file for the ShEx JSON format.
# See ShExJ.jsg for comments and the full structure

Schema           {
  "@context":"http://www.w3.org/ns/shex.jsonld"?
  imports:[IRIREF+]?
  startActs:[SemAct+]? start:shapeExpr? shapes:[shapeExpr+]?
 }

# Shape Expressions
shapeExpr        = ShapeOr | ShapeAnd | ShapeNot | NodeConstraint | Shape | ShapeExternal | shapeExprRef;
ShapeOr          { id:shapeExprLabel? shapeExprs:[shapeExpr{2,}] }
ShapeAnd         { id:shapeExprLabel? shapeExprs:[shapeExpr{2,}] }
ShapeNot         { id:shapeExprLabel? shapeExpr:shapeExpr }
ShapeExternal    { id:shapeExprLabel? }
shapeExprRef     = shapeExprLabel ;
shapeExprLabel   = IRIREF|BNODE ;
NodeConstraint   { id:shapeExprLabel? nodeKind:("iri"|"bnode"|"nonliteral"|"literal")? datatype:IRIREF? xsFacet* values:[valueSetValue+]? }

# XML Schema facets
xsFacet          = stringFacet | numericFacet ;
stringFacet      = (length|minlength|maxlength):INTEGER | pattern:STRING flags:STRING? ;
numericFacet     = (mininclusive|minexclusive|maxinclusive|maxexclusive):numericLiteral
                 | (totaldigits|fractiondigits):INTEGER ;

numericLiteral   = INTEGER|DECIMAL|DOUBLE ;

# Value Sets
valueSetValue    = objectValue | IriStem | IriStemRange | LiteralStem | LiteralStemRange | Language | LanguageStem | LanguageStemRange ;
objectValue      = IRIREF|ObjectLiteral ;
ObjectLiteral    { value:STRING language:STRING? type:STRING? }
IriStem          { stem:IRIREF } # IriStemRange with exclusions
IriStemRange     { stem:(IRIREF|Wildcard) exclusions:[IRIREF|IriStem+]? }
LiteralStem      { stem:STRING } # LiteralStemRange with exclusions
LiteralStemRange { stem:(STRING|Wildcard) exclusions:[STRING|LiteralStem+]? }
Language         { languageTag: LANGTAG }
LanguageStem     { stem:(LANGTAG | EMPTY) }
LanguageStemRange{ stem:(LANGTAG | EMPTY) exclusions:[LANGTAG|LanguageStem+]? }
Wildcard         {  }

Shape            { id:shapeExprLabel? closed:BOOL? extra:[IRIREF+]? expression:tripleExpr? semActs:[SemAct+]? annotations:[Annotation+]? }

# Triple Expressions
tripleExpr       = EachOf | OneOf | TripleConstraint | tripleExprRef ;
EachOf           { id:tripleExprLabel? expressions:[tripleExpr{2,}] min:INTEGER? max:INTEGER? semActs:[SemAct+]? annotations:[Annotation+]? }
OneOf            { id:tripleExprLabel? expressions:[tripleExpr{2,}] min:INTEGER? max:INTEGER? semActs:[SemAct+]? annotations:[Annotation+]? }
TripleConstraint { id:tripleExprLabel? inverse:BOOL? predicate:IRIREF valueExpr:shapeExpr? min:INTEGER? max:INTEGER? semActs:[SemAct+]? annotations:[Annotation+]? }
tripleExprRef    = tripleExprLabel ;
tripleExprLabel  = IRIREF|BNODE ;

SemAct           { name:IRIREF code:STRING? }
Annotation       { predicate:IRIREF object:objectValue }

# Terminals used in productions:
IRIREF           : (PN_CHARS | '.' | ':' | '/' | '\\' | '#' | '@' | '%' | '&' | UCHAR)* ; # <http://www.w3.org/TR/turtle/#grammar-production-IRIREF> - "<>"s
BNODE            : '_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)? ; # <http://www.w3.org/TR/turtle/#grammar-production-BLANK_NODE_LABEL>
BOOL             : "true" | "false" ; # JSON boolean tokens
INTEGER          : [+-]? [0-9] + ; # <http://www.w3.org/TR/turtle/#grammar-production-INTEGER>
DECIMAL          : [+-]? [0-9]* '.' [0-9] + ; # <http://www.w3.org/TR/turtle/#grammar-production-DECIMAL>
DOUBLE           : [+-]? ([0-9] + '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT) ; # <http://www.w3.org/TR/turtle/#grammar-production-DOUBLE>
LANGTAG          : [a-zA-Z] + ('-' [a-zA-Z0-9]+)* ;
STRING           : .* ;
EMPTY            : '' ;

# Terminals use only in other terminals:
PN_PREFIX        : PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)? ;
PN_CHARS_BASE    : [A-Z] | [a-z] | [\u00C0-\u00D6] | [\u00D8-\u00F6]
                 | [\u00F8-\u02FF] | [\u0370-\u037D] | [\u037F-\u1FFF]
                 | [\u200C-\u200D] | [\u2070-\u218F] | [\u2C00-\u2FEF]
                 | [\u3001-\uD7FF] | [\uF900-\uFDCF] | [\uFDF0-\uFFFD]
                 | [\u10000-\uEFFFF] ;
PN_CHARS         : PN_CHARS_U | '-' | [0-9] | '\u00B7' | [\u0300-\u036F] | [\u203F-\u2040] ;
PN_CHARS_U       : PN_CHARS_BASE | '_' ;
UCHAR            : '\\u' HEX HEX HEX HEX
                 | '\\U' HEX HEX HEX HEX HEX HEX HEX HEX ;
HEX              : [0-9] | [A-F] | [a-f] ;
EXPONENT 	 : [eE] [+-]? [0-9]+ ;
